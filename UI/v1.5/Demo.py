# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog, QApplication
import os
import time
from threading import Timer
from run_model import run_model

class Ui_MainWindow(object):
    def __init__(self):
        self.imgList = []
        self.folderPath = '/home/xingpeng/Project/Interface_Demo/UI_work/sample_images_bmp/'  # by default
        self.modelPath = '/home/xingpeng/Project/Interface_Demo/UI_work/checkpoint-95e-val_accuracy_0.93.hdf5'
        self.outputFolderPath = ''
        self.imgNum = 0
        self.imgIdx = 0
        self.rawpix = QPixmap()
        self.heatmappix = QPixmap()
        self.total_score = 0
        self.score_array = []
        self.clicked = False


        self.desktop = QApplication.desktop()
        self.screenRect = self.desktop.screenGeometry()
        self.screen_height = self.screenRect.height()  # 1080
        self.screen_width = self.screenRect.width()  # 1920

        self.test_run = False
        self.has_model = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)
        MainWindow.resize(self.screen_width, self.screen_height)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.scene = QtWidgets.QGraphicsScene(self.centralwidget)
        self.scene_heatmap = QtWidgets.QGraphicsScene(self.centralwidget)

        self.folderSelectButton = QtWidgets.QPushButton(self.centralwidget)
        self.folderSelectButton.setGeometry(QtCore.QRect(110, 10, 90, 30))
        self.folderSelectButton.setObjectName("folderSelectButton")
        self.folderSelectButton.clicked.connect(self.openFolderClicked)

        self.folderPathLabel = QtWidgets.QLabel(self.centralwidget)
        self.folderPathLabel.setGeometry(QtCore.QRect(210, 10, 600, 30))
        self.folderPathLabel.setObjectName("folderPathLabel")
        self.folderPathLabel.setText("Image Folder Path")

        self.modelSelectButton = QtWidgets.QPushButton(self.centralwidget)
        self.modelSelectButton.setGeometry(QtCore.QRect(880, 10, 90, 30))
        self.modelSelectButton.setObjectName("modelSelectButton")
        self.modelSelectButton.setText("Load Model")
        self.modelSelectButton.clicked.connect(self.modelSelectClicked)

        self.modelPathLabel = QtWidgets.QLabel(self.centralwidget)
        self.modelPathLabel.setGeometry(QtCore.QRect(980, 10, 600, 30))
        self.modelPathLabel.setObjectName("modelPathLabel")
        self.modelPathLabel.setText("Model Path")

        self.rawImageView = QtWidgets.QGraphicsView(self.centralwidget)
        self.rawImageView.setGeometry(QtCore.QRect(110, 50, 750, 750))
        self.rawImageView.setObjectName("rawImageView")

        self.gradCamView = QtWidgets.QGraphicsView(self.centralwidget)
        self.gradCamView.setGeometry(QtCore.QRect(880, 50, 750, 750))
        self.gradCamView.setObjectName("gradCamView")


        self.prevImgButton = QtWidgets.QPushButton(self.centralwidget)
        self.prevImgButton.setGeometry(QtCore.QRect(110, 825, 90, 20))
        self.prevImgButton.setObjectName("prevImgButton")
        self.prevImgButton.setText('<-')
        self.prevImgButton.clicked.connect(self.prevImgClicked)

        self.nextImgButton = QtWidgets.QPushButton(self.centralwidget)
        self.nextImgButton.setGeometry(QtCore.QRect(770, 825, 90, 20))
        self.nextImgButton.setObjectName("nextImgButton")
        self.nextImgButton.setText('->')
        self.nextImgButton.clicked.connect(self.nextImgClicked)




        self.arrayValueLabel = QtWidgets.QLabel(self.centralwidget)
        self.arrayValueLabel.setGeometry(QtCore.QRect(880, 825, 250, 20))
        self.arrayValueLabel.setObjectName("arrayValueLabel")
        self.arrayValueLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.arrayValueLabel.setText("Present score")

        self.singleValueLabel = QtWidgets.QLabel(self.centralwidget)
        self.singleValueLabel.setGeometry(QtCore.QRect(880, 850, 250, 20))
        self.singleValueLabel.setObjectName("singleValueLabel")
        self.singleValueLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.singleValueLabel.setText("Sequence value")


        self.runButton = QtWidgets.QPushButton(self.centralwidget)
        self.runButton.setGeometry(QtCore.QRect(415, 825, 90, 40))
        self.runButton.setObjectName("runButton")
        self.runButton.clicked.connect(self.runDemoClicked)

        self.statusInfo = QtWidgets.QLabel(self.centralwidget)
        self.statusInfo.setGeometry(QtCore.QRect(200, 880, 600, 30))
        self.statusInfo.setObjectName("statusInfo")
        self.statusInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.statusInfo.setText("Status")

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Demo"))
        self.folderSelectButton.setText(_translate("MainWindow", "Open Folder"))
        self.folderPathLabel.setText(_translate("MainWindow", "TextLabel"))
        self.runButton.setText(_translate("MainWindow", "Run"))

    def openFolderClicked(self):
        self.folderPath = QFileDialog.getExistingDirectory(self.centralwidget, 'select a folder', os.getcwd())
        self.folderPathLabel.setText(self.folderPath)
        if self.folderPath=='':
            return
        files = sorted(os.listdir(self.folderPath))
        imglist=[]
        for file in files:
            file_path = os.path.join(self.folderPath,file)
            if os.path.isfile(file_path) and file_path.endswith('bmp'):
                imglist.append(file)
        self.imgList = imglist
        self.imgNum = len(self.imgList)
       # print(imglist)
        self.showImage()

    def modelSelectClicked(self):
        self.modelPath = QFileDialog.getExistingDirectory(self.centralwidget, 'select a model folder', os.getcwd())
        self.modelPathLabel.setText(self.modelPath)
        if self.modelPath=='':
            return
        self.statusInfo.setText('Model loaded')
        self.has_model = True

    def prevImgClicked(self):
        if self.imgIdx > 0:
            self.imgIdx -= 1
        else:
            return

        self.showImage()

    def nextImgClicked(self):
        if self.imgIdx < self.imgNum-1:
            self.imgIdx += 1
        else:
            return

        self.showImage()

    def runDemoClicked(self):
        if self.has_model is False:
            self.statusInfo.setText('No model loaded')
            return
        self.runButton.setDisabled(True)
        self.runButton.disconnect()
        print('bottom disable')
        self.statusInfo.setText('Running model ...')
        self.statusInfo.repaint()
        total_score, score_array, hmdir = run_model(self.modelPath,self.folderPath)
        self.total_score = total_score
        self.score_array = score_array

        self.outputFolderPath = hmdir

        self.statusInfo.setText('Showing result')
        self.statusInfo.repaint()
        self.bottonclicked = False
        self.test_run = True
        self.showImage()
        print('bottom enable')
        self.runButton.setEnabled(True)
     #   self.runButton.clicked.connect(self.runDemoClicked)




    def showImage(self):
        if self.score_array!=[]:
            self.arrayValueLabel.setText('Total score: %.2f' % self.total_score)
            self.singleValueLabel.setText('Present score: %.2f' % self.score_array[self.imgIdx])
        img_name = self.imgList[self.imgIdx]

        img_path = os.path.join(self.folderPath, img_name)
        # print(img_path)
        self.rawpix.load(img_path)
        self.rawpix = self.rawpix.scaledToHeight(740)
        raw_item = QtWidgets.QGraphicsPixmapItem(self.rawpix)
        self.scene.addItem(raw_item)
        self.rawImageView.setScene(self.scene)
        self.folderPathLabel.setText(img_path)

        if self.test_run:
            img_heatmap_path = os.path.join(self.outputFolderPath ,img_name)
            # print(img_heatmap_path)
            self.heatmappix.load(img_heatmap_path)
            self.heatmappix = self.heatmappix.scaledToHeight(740)
            item = QtWidgets.QGraphicsPixmapItem(self.heatmappix)
            self.scene_heatmap.addItem(item)
            self.gradCamView.setScene(self.scene_heatmap)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
